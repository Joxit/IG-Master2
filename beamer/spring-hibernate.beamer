---
title: Introduction à Spring et Hibernate
subtitle: Institut Galilée - Master 2 PLS
author: Jones Magloire
date: 26 Octobre 2020
theme: metropolis
toc: true
section-titles: false
header-includes: |
  \newcommand{\hideFromPandoc}[1]{#1}
  \usepackage{fourier}
  \hideFromPandoc{ \let\Begin\begin \let\End\end }
  \metroset{block=fill}
  \newcommand{\sectionimage}{Foo}
  \newcommand{\imagedirectory}{spring-hibernate-images}
  \AtBeginEnvironment{block}{\setbeamercolor{itemize item}{fg=blueJawg}}
  \AtBeginEnvironment{block}{\setbeamercolor{itemize subitem}{fg=blueJawg}}
  \usepackage{dirtytalk}
build: pandoc -st beamer spring-hibernate.beamer -B aboutme.tex -o spring-hibernate.pdf
---

# Qu'est-ce que JEE ?

---

## Qu'est-ce que JEE ?

- Version actuelle Jakarta EE 8
- Ensemble de Java Specification Requests ou JSR
  - JTA (Java Transaction API)
  - JDBC (Java DataBase Connection)
  - JPA (Java Persistence API)
  - Servlet
  - JSP (JavaServer PAges)
  - EJB (Enterprise Java Bean)
- Cédé à Eclipse Foundation en septembre 2017

----

## Qu'est-ce que JEE ?

\begin{block}{Plusieurs type de serveur}
  \begin{itemize}
    \item Serveur d'application (Glassfish, WildFly...)
    \item Conteneur de servlets (Tomcat, Jetty, WebSphere...)
  \end{itemize}
\end{block}

\begin{block}{Implémentation des spécifications}
  \begin{itemize}
    \item Spring Framwork et ses modules
    \begin{itemize}
        \item Spring JDBC (implémente JDBC)
        \item Spring ORM (binding hibernate et JPA)
        \item Spring Web et WebMVC (implémentent servlet)
    \end{itemize}
    \item Hibernate ORM (JPA)
  \end{itemize}
\end{block}

## JEE{.standout}

\centering\Huge{\href{https://servlet.joxit.dev/}{Démo}}

# Pourquoi Hibernate ?

----

## Que fait Hibernate ?

\begin{block}{Object-Relational Mapping (ORM)}
  \begin{itemize}
    \item Classe Java $\Leftrightarrow$ Table SQL (Entity)
    \item Transactions (JTA)
    \item Création des tables au démarrage
    \item Lazy loading
    \item Gestion des sessions à la DB
    \item Cache
  \end{itemize}
\end{block}

## Hibernate{.standout}

\centering\Huge{\href{http://127.0.0.1:8080?type=lazy}{Démo}}

## Avantages et Inconvéniants

\begin{exampleblock}{Avantages}
  \begin{itemize}
    \item<1-> Mapping des classes automatique
    \item<1-> Rapidité d'implémentation
    \item<1-> Génère les requêtes SQL
    \item<1-> Changement facile de SGBD
  \end{itemize}
\end{exampleblock}

\begin{alertblock}{Inconvéniants}
  \begin{itemize}
    \item<2-> Requêtes complexes pas toujours optimisées
    \item<2-> \danger Les relations One/Many To Many en mode lazzy
  \end{itemize}
\end{alertblock}

# Pourquoi Spring ?

----

## Que fait Spring ?

\begin{block}{L'inversion de contrôle (IOC)}
  \begin{itemize}
    \item Résolution des dépendances pour la création des beans (Singleton/Prototype)
    \item Injection des dépendances
  \end{itemize}
\end{block}

\begin{block}{Programmation orientée aspect (AOP)}
  \begin{itemize}
    \item Transactions
    \item Exception handler
    \item Intercepteurs (ex: securité)
  \end{itemize}
\end{block}

## Spring Framework{.standout}

\centering\Huge{\href{https://joxit.dev/IG-Master2/ui/?url=https://servlet.joxit.dev/api}{Démo}}

# Spring vs Spring Boot ?

----

## Spring vs Spring Boot ?

\begin{block}{Spring Boot}
  \begin{itemize}
    \item Basé sur Spring Framwork
    \item Configuration automatique de l'application
    \item Pas de déploiement de war
    \item Beaucoup, beaucoup, beaucoup moins de code
    \item Produit un fat jar (plus simple à lancer)
    \item Bien pour faire des microservices scalable
  \end{itemize}
\end{block}

## Spring Boot{.standout}

\centering\Huge{\href{https://joxit.dev/IG-Master2/ui/?url=https://boot.joxit.dev/api}{Démo}}

# Qu'est-ce que ~~Maven~~ Gradle ?


----

## Qu'est-ce que ~~Maven~~ Gradle ?

- Gestionnaire de build et de dépendances évolué
- Utilisation du multi-module
- Lancement des tests
- Plugins en tout genre
- Sans installation grâce au wrapper
- Moins verbeux que Maven (Groovy/Kotlin vs XML)

## Gradle{.standout}

\centering\Huge{\href{https://github.com/Joxit/IG-Master2/commit/a77b03c0496a31a3fabbcf9d873f45bc909ac9a2}{Démo}}

# Reactive Programming ?

----

## Reactive Programming

\begin{block}{Modèle classique}
  \begin{itemize}
    \item 1 requête = 1 thread
    \item 10 requêtes = 10 threads
    \item 100 requêtes = 100 threads
    \item  Mais combien d’opérations peuvent réellement être exécutées en même temps?
  \end{itemize}
\end{block}

\begin{block}{Modèle réactif}
  \begin{itemize}
    \item Des requêtes sur des \say{workers}
    \item Optimiser l’activité du thread plutôt que le nombre de threads
    \item Opérations non blocantes
  \end{itemize}
\end{block}


## Reactive Programming{.standout}

\centering\Huge{Démo}

# Et pour après ?

----

## Autres frameworks ?

\begin{block}{Alternatives à JEE}
  \begin{itemize}
    \item Vert.x (framework événementiel par la fondation Eclipse)
    \item Netty (framework non-blocking I/O par Netty Project Community)
    \item Quarkus + GraalVM
    \item Ktor (framwork asynchrone designé pour Kotlin)
  \end{itemize}
\end{block}

## Vert.x{.standout}

\centering\Huge{Démo}

## Introduction à Spring et Hibernate{.standout}

\centering\Huge{Questions ?}

## Stage takima

- 2 mois de formation
    - 1 semaine en piscine (JEE stack)
    - Projet incrémental
        - Java 11 (LTS), Spring, Spring-MVC, Spring-Security, Hibernate ORM, Spring Data JPA, JDBC Template, JPA, Jackson, Selenium, Junit, Mockito, Docker, Jenkins, Gatling, Angular
        - 1 semaine DevOPS
        - 1 jour sur la performance + tunning
    - Conférences et formations JVM, Spring, Hibernate, Git, React.js, Gatling, Agilité, REST
    - Certifications Oracle Certified Java Programmer Associate & Professional
- 4 mois sur un projet interne

## Stage takima

- Séminaires (Samedi, Dimanche, Lundi)
- Hackathons
- Meetups interne
- Billard en interne
- Nintendo Switch
